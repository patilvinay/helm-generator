- hosts: localhost
  connection: local
  gather_facts: no
  vars_files:
      - ./templates/var.yaml
     # - cert-manager.config.yaml
      - config.yaml
  tasks:
    - name: Delete existing helm charts if any
      file:
        path: "helm"
        state: absent

    - name: Creating helm directory
      file:
        path: "helm/{{ app.name }}"
        state: directory

    - name: Create Helm Chart
      shell: helm create helm/{{ app.name }}


    - name: Remove unwanted auto generated helm file
      file:
        path: "{{ item }}"
        state: absent
      with_items:
        - "helm/{{ app.name }}/templates/deployment.yaml"
        - "helm/{{ app.name }}/templates/service.yaml"
        - "helm/{{ app.name }}/templates/ingress.yaml"
        - "helm/{{ app.name }}/templates/serviceaccout.yaml"
##########################################################################################
######################### Create the helm template using jinja2 template #################
##########################################################################################
    - name: Creating Deployment from templates
      template:
        src: deployment.yaml.j2
        dest: "helm/{{ app.name }}/templates/deployment.yaml"
      when:   config.deployment  == 'enabled'
#------------------------------------------------------------------------------------------      

    - name: Creating Service from templates
      template:
        src: service.yaml.j2
        dest: "helm/{{ app.name }}/templates/service.yaml"
      when:   config.service  == 'enabled'
#------------------------------------------------------------------------------------------

    - name: Creating ingress from templates
      template:
        src: ingress.yaml.j2
        dest: "helm/{{ app.name }}/templates/ingress.yaml"   
      when:   config.ingress  == 'enabled'  
#------------------------------------------------------------------------------------------

    - name: Creating Istio GW from templates
      template:
        src: gateway.yaml.j2
        dest: "helm/{{ app.name }}/templates/gateway.yaml"
      when:   config.gateway  == 'enabled'
#------------------------------------------------------------------------------------------

    - name: Creating VS from templates
      template:
        src: virtualService.yaml.j2
        dest: "helm/{{ app.name }}/templates/virtualService.yaml"
      when:   config.virtualService  == 'enabled'
#------------------------------------------------------------------------------------------

    - name: Creating values from templates
      template:
        src: values.yaml.j2
        dest: "helm/{{ app.name }}/values.yaml"
     

########################################################################################### 

    - name: Creating doc-reg-secret resource from templates
      template:
        src: doc-reg-secret.yaml.j2
        dest: "helm/{{ app.name }}/templates/doc-reg-secret.yaml"
      when:   config.pullsecret  == 'enabled'
#------------------------------------------------------------------------------------------

    - name: Create link to doc-reg-secret file
      file:
        dest: helm/{{ doc_reg_secret.tokenFileSymLink }}
        src: "{{ doc_reg_secret.tokenFile }}"
        state: link
        force: yes
      when:   config.pullsecret  == 'enabled'
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
  
    - name: Creating db secret resource from template
      template:
        src: db-secret.yaml.j2
        dest: helm/{{ app.name }}/templates/db-secret.yaml
      when:   config.dbSecret  == 'enabled'
#------------------------------------------------------------------------------------------

    - name: Create link to db secret file
      file:
        dest: "helm/{{ db_secret.tokenFileSymLink }}"
        src: "{{ db_secret.tokenFile }}"
        state: link
        force: yes
      when:   config.dbSecret  == 'enabled'

    
###########################################################################################        
################################### Create cert-manager issuer ############################

    - name: Creating Certmanager Issuer resource
      template:
          src: certmanager-issuer.yaml.j2
          dest: "helm/{{ app.name }}/templates/certmanager-issuer.yaml"
      when:  config.certIssuer  == 'enabled'
      register: result
      ignore_errors: yes
    
    - name: Create link to provider secret file
      file:
        dest: "helm/{{ cert_manager.tokenFileSymLink }}"
        src: "{{ cert_manager.tokenFile }}"
        state: link
        force: yes
      when:  config.certIssuer  == 'enabled'
    
    - name: Create link to provider secret file
      file:
        dest: "helm/{{ cert_manager.tokenFileSymLink }}"
        src: "{{ cert_manager.tokenFile }}"
        state: link
        force: yes
      when:  config.certIssuer  == 'enabled'







    
###########################################################################################        
################################### Create cert-manager certificate########################


    - name: Creating staging certificate resource from template
      
      template:
        src: certificate.yaml.j2
        dest: helm/certificate-staging.yaml
      vars:  
       certificate: 
          issuer: letsencrypt
          type: staging
          name: "{{ app.name }}"
          app: "{{ app.name }}"
          #class: istio
          hostBaseDomain: "{{ app.host }}"
          namespace: istio-system
      when:  config.certificates  == 'enabled'

    - name: Creating production certificate resource from template
      template:
        src: certificate.yaml.j2
        dest: helm/certificate-prod.yaml
      vars:  
         certificate: 
          issuer: letsencrypt
          type: prod
          name: "{{ app.name }}"
          app: "{{ app.name }}"
          #class: istio
          hostBaseDomain: "{{ app.host }}"
          namespace: istio-system
      when:  config.certificates  == 'enabled'
    

   

