app:
    name: cloudbilling-api
    version: latest
    host: cloudbilling-api.ngxconnect.in
    kubeContext: do-blr1-k8s-090420
    namespace: cloudbilling
    version: 0.1.0
    maintainer: vinay.hpatil@gmail.com
    registry: registry.gitlab.com/vinay.hpatil/
    genpath: /home/vagrant/d2/cloudbilling-api/cloudbilling-api-deploy/

config:
   deployment: 'enabled' 
   service: 'enabled'
   ingress: 'disabled'
   gateway: 'enabled'
   pullsecret: 'enabled'
   appSecret: 'enabled'
   dbSecret: 'enabled'
   virtualService: 'enabled'
   dockerSecret: 'enabled'
   applicationSecret: 'enabled'
   dockersecret: 'enabled'
   certIssuer: 'disabled'
   certificates: 'disabled'
   serviceAccount: 'enabled'



ingress:
    class: istio
    hostBaseDomain: "{{ app.host }}"
    svcName: "{{ app.name }}"
    svcPort: 5000  
    svcPath: /
  
   
service:
  type: ClusterIP
  port: 3000
  containerPort: 3000
  enabled: true


deployment:
    class: istio
    hostBaseDomain: "{{ app.host }}"
    svcName: "{{ app.name }}"
    svcPort: 5000  
    svcPath: /
    containerPorts: 
      - containerPort: 3000
        protocol: TCP
        name: http
    env:
      - name: DBSTRING
        valueFrom:
          secretKeyRef:
             name: "{{ app.name }}-dbstring"
             key: dbstring     


    container:
        name: "{{app.name}}"
        registry: "{{app.registry}}"
        pullPolicy: IfNotPresent
        livenessprobe: no 


virtualService:
   destination:
      - path: /
        port: 3000
        host: "{{ app.name }}"
      
     

gateway:
    domain: "{{ app.host }}"
    port: 80
    portname: http
    protocol: HTTP




db_secret:
     tokenFileSymLink:  ".dbstring"
     tokenFile: "~/.config/{{ app.name }}/.dbstring"

doc_reg_secret:
     tokenFileSymLink:   ".doc-reg-secret"
     tokenFile: "~/.config/{{ app.name }}/.doc-reg-secret"
    



cert_manager:
    issuer: certmanager-dns
    email: "{{ app.maintainer }}"
    server:  https://acme-staging-v02.api.letsencrypt.org/directory
    tokenFile: "~/.config/.cert-manager-dns-token"
    tokenFileSymLink: ".cert-dns-token"

certificate: 
    issuer: letsencrypt
    type: staging #! emum { staging , prod}
    #name: cert-todo
    name: "{{ app.name }}"
    app: "{{ app.name }}"
    class: istio
    hostBaseDomain: "{{ app.host }}"
    namespace: istio-system
  
  
